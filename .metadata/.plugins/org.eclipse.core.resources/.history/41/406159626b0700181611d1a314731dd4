/**
 * TicketMachine models a naive ticket machine that issues
 * flat-fare tickets.
 * The price of a ticket is specified via the constructor.
 * It is a naive machine in the sense that it trusts its users
 * to insert enough money before trying to print a ticket.
 * It also assumes that users enter sensible amounts.
 *
 * @author David J. Barnes and Michael KÃ¶lling
 * @version 2016.02.29
 */
public class TicketMachine
{
    // The price of a ticket from this machine.
    private double price;
    // The amount of money entered by a customer so far.
    private double balance;
    // The total amount of money collected by this machine.
    private double total;

    private boolean discount = false;    
    /**
     * Create a machine that issues tickets of the given price.
     * Note that the price must be greater than zero, and there
     * are no checks to ensure this.
     */
    public TicketMachine(int cost)
    {
        price = cost;
        balance = 0;
        total = 0;
    }
    
    public TicketMachine()
    {
        price = 0;
        balance = 0;
        total = 0;
    }
    public void setPrice(int cost){
        this.price = cost;
    }
    /**
     * Return the price of a ticket.
     */
    public double getPrice()
    {
        if(discount){
            return price - price*0.2;
        }else{
            return price;
        }
    }
    /**
     * Este metodo comprueba que el dinero introducido sea igual al precio
     */
    public void prompt(){
        if (balance!=price){
            System.out.println("Please insert the correct amount of money.");
        }
    }
    public void showPrice(){
        System.out.println("The price of the ticket is " + price +  " cents.");
    }
    /**
     * Return the amount of money already inserted for the
     * next ticket.
     */
    public double getBalance()
    {
        return balance;
    }

    /**
     * Receive an amount of money from a customer.
     */
    public void insertMoney(int amount)
    {
        balance = balance + amount;
    }

    /**
     * Print a ticket.
     * Update the total collected and
     * reduce the balance to zero.
     */
    public void printTicket()
    {
        double amountToPay;
        if(discount){
            price = price - price*0.20;
            amountToPay = price - balance;
            discount = false;
        }
        else{
            amountToPay = price  - balance;
        }
        if(amountToPay<=0){
        // Simulate the printing of a ticket.
        System.out.println("##################");
        System.out.println("# The BlueJ Line");
        System.out.println("# Ticket");
        System.out.println("# " + price + " cents.");
        System.out.println("##################");
        System.out.println();

        // Update the total collected with the balance.
        total = total + balance;
        // Clear the balance.
        balance = 0;
        //limpia el descuento
        amountToPay = 0;
        }else{
            System.out.println("Falta introducir : " + amountToPay);
        }
    }
    public double getTotal() {
        return total;
    }
    public double emptyMachine(){
        double acum = total;
        total = 0;
        return acum;
    }
    public boolean setDiscount(){
        return discount = true;
    }
}
