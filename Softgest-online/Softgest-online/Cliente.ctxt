#BlueJ class context
comment0.target=Cliente
comment1.params=tienda\ nombre\ cartera
comment1.target=Cliente(Tienda,\ java.lang.String,\ double)
comment10.params=
comment10.target=double\ getTotal()
comment11.params=
comment11.target=void\ resetTotal()
comment12.params=
comment12.target=void\ vaciarCarro()
comment12.text=\r\n\ Este\ metodo\ elimina\ todos\ los\ articulos\ del\ carro\ y\ resetea\ el\ valor\ del\ total\ a\ 0\r\n
comment13.params=
comment13.target=int\ getNumarts()
comment14.params=
comment14.target=double\ getGastoTotal()
comment15.params=valor
comment15.target=void\ setGastoTotal(double)
comment16.params=articulo
comment16.target=int\ getCount(Articulo)
comment17.params=valor
comment17.target=void\ restarCartera(double)
comment2.params=
comment2.target=java.lang.String\ getNombre()
comment3.params=
comment3.target=double\ getCartera()
comment4.params=valor
comment4.target=void\ setCartera(int)
comment5.params=
comment5.target=void\ setId()
comment6.params=
comment6.target=int\ getIdcliente()
comment7.params=articulo
comment7.target=void\ addArticulo(Articulo)
comment7.text=\r\n\ este\ metodo\ comprueba\ que\ el\ articulo\ tenga\ unidades\ para\ opder\ ser\ a\u00F1adido\ a\ la\ coleccion\ de\ articulos\ del\ cliente\r\n\ En\ caso\ de\ que\ el\ valor\ de\ lass\ unidades\ sea\ 0\ imprime\ que\ no\ queda\ stock,\ en\ caso\ contrario\ comprueba\ si\ el\ articulo\ ya\ esta\ en\ la\r\n\ coleccion.\ Si\ esta\ en\ la\ coleccion\ aumenta\ las\ unidades\ del\ articulo\ en\ la\ coleccion\ y\ lo\ resta\ de\ las\ unidades\ del\ articulo,\ si\ no\ esta\ \r\n\ lo\ a\u00F1ade\ a\ la\ coleccion\ y\ resta\ una\ unidad\ al\ stock\ del\ articulo.\r\n
comment8.params=
comment8.target=java.util.ArrayList\ getArticulos()
comment9.params=valor
comment9.target=void\ setTotal(double)
numComments=18
