#BlueJ class context
comment0.target=Cliente
comment1.params=tienda\ nombre\ cartera
comment1.target=Cliente(Tienda,\ java.lang.String,\ double)
comment10.params=
comment10.target=java.util.ArrayList\ getArticulos()
comment10.text=\r\n\ Metodo\ que\ devuelve\ un\ listado\ con\ todos\ los\ articulos\ del\ carro\ del\ cliente\r\n
comment11.params=valor
comment11.target=void\ setTotal(double)
comment12.params=valor
comment12.target=void\ restaTotal(double)
comment13.params=
comment13.target=double\ getTotal()
comment14.params=
comment14.target=void\ resetTotal()
comment15.params=
comment15.target=void\ vaciarCarro()
comment15.text=\r\n\ Este\ metodo\ elimina\ todos\ los\ articulos\ del\ carro\ y\ resetea\ el\ valor\ del\ total\ a\ 0\r\n
comment16.params=articulo
comment16.target=void\ eliminarArticulo(Articulo)
comment16.text=\r\n\ Metodo\ para\ eliminar\ un\ articulo\ del\ carro\ del\ cliente,\ y\ descontar\ del\ total\ del\ carro\ del\ cliente\ el\ precio\ del\r\n\ articulo\ por\ las\ unidades\ que\ tuviera\r\n
comment17.params=articulo
comment17.target=void\ restarArticulo(Articulo)
comment17.text=\r\n\ Metodo\ que\ resta\ una\ unidad\ del\ contador\ de\ un\ articulo\ del\ carro\ del\ cliente\ o\ lo\ elimina\ si\ su\ cantidad\ es\ 0\r\n
comment18.params=articulo\ cantidad
comment18.target=void\ restarArticulo(Articulo,\ int)
comment18.text=\r\n\ Metodo\ que\ resta\ una\ cantidad\ del\ contador\ de\ un\ articulo\ del\ carro\ del\ cliente\ o\ lo\ elimina\ si\ llega\ a\ 0\r\n
comment19.params=
comment19.target=int\ getNumarts()
comment2.params=
comment2.target=java.lang.String\ getNombre()
comment20.params=
comment20.target=double\ getGastoTotal()
comment21.params=valor
comment21.target=void\ setGastoTotal(double)
comment22.params=valor
comment22.target=void\ restaGastoTotal(double)
comment23.params=articulo
comment23.target=int\ getCount(Articulo)
comment24.params=valor
comment24.target=void\ restarCartera(double)
comment25.params=
comment25.target=java.lang.String\ toString()
comment3.params=nuevonombre
comment3.target=void\ setNombre(java.lang.String)
comment4.params=
comment4.target=double\ getCartera()
comment5.params=valor
comment5.target=void\ setCartera(double)
comment6.params=
comment6.target=void\ setId()
comment7.params=
comment7.target=int\ getIdcliente()
comment8.params=articulo
comment8.target=void\ addArticulo(Articulo)
comment8.text=\r\n\ este\ metodo\ comprueba\ que\ el\ articulo\ tenga\ unidades\ para\ poder\ ser\ a\u00F1adido\ a\ la\ coleccion\ de\ articulos\ del\ cliente\r\n\ En\ caso\ de\ que\ el\ valor\ de\ las\ unidades\ sea\ 0\ imprime\ que\ no\ queda\ stock,\ en\ caso\ contrario\ comprueba\ si\ el\ articulo\ ya\ esta\ en\ la\r\n\ coleccion.\ Si\ esta\ en\ la\ coleccion\ aumenta\ las\ unidades\ del\ articulo\ en\ la\ coleccion\ y\ lo\ resta\ de\ las\ unidades\ del\ articulo,\ \r\n\ si\ no\ esta\ lo\ a\u00F1ade\ a\ la\ coleccion\ y\ resta\ una\ unidad\ al\ stock\ del\ articulo.\r\n
comment9.params=articulo\ cantidad
comment9.target=void\ addArticulo(Articulo,\ int)
comment9.text=\r\n\ Este\ metodo\ es\ similar\ a\ addArticulo\ pero\ a\u00F1adiendo\ el\ parametro\ cantidad\ para\ aumentar\ el\ numero\ de\ unidades\r\n\ del\ articulo,\ este\ metodo\ comprueba\ que\ haya\ suficiente\ Stock\ \ y\ en\ caso\ contrario\ muestra\ un\ mensaje\ con\ \r\n\ las\ unidades\ disponibles.\r\n
numComments=26
